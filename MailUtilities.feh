uses "/cention/etc/webframework-config.feh";
uses "webframework/webframework";

uses 'console';
uses 'math';

global {	
	number failSafeTry = 3;
}

namespace MailUtilities{
	/**
		This function select a random server from the  list of servers available in webframework.config 
	**/
	boolean seeded = false;
	function seedRandomNumberGenerator {
		if( not .seeded ) {
			.seeded = true;
			Math.srand(Date.GMTnow());
		}
	}
	 
	function selectMailServer(){
		monitor{	
			array serverList = [];
			object r = new Regexp('^outbound\.mailserver\.(.*?)\.(.*)', 'i');

			webframework.Config.byName('Outbound.Mailserver.*').each() using ( config ) {
				object match = r.match(config.name.toLower());
				if( match ) {
					string server = match.capture(0).toLower();
					string part = match.capture(1).toLower();
					if( server and part ) {
						if( not serverList.keyExists(server) ) {
							serverList[server] = [ 'host' => 'localhost', 'username' => '', 'password' => '', 'ssl' => false ];
						}
						serverList[server][part] = (part == 'ssl' ?
														(config.value.toLower() == 'yes' ? true : false) :
														config.value);
					}
				}
			};	
			.seedRandomNumberGenerator();
			return serverList[Math.randomNumber(0, serverList.size() - 1)];
		}
		handle{
			Console.println("Unable to select mail server: " + err.str);
		}
		return [];
	}


	function failSafeTry(){
		monitor{
			return webframework.Config.byName('FailSafeTry')[0].value.toNumber();
		}
		handle{
			return failSafeTry;
		}
	}

	function sendMessage( object connection, object message )
		return .sendMessage( connection, MailUtilities.selectMailServer(), message, 0 );

	function sendMessage( object connection, array server, object message, number try ) {
		if ( try > MailUtilities.failSafeTry() ) 
			return false;

		if( server ) {
			// Workaround for uw-imap bug
			log(" ---> Send attempt [$try] for server $server");
			if( connection.sendMessage( server['host'], server['username'], server['password'], server['ssl'], message ) ) {
				return true;
			}
		}

		try ++;
		return MailUtilities.sendMessage( connection, server, message, try );
	}

	function setOutgoingHeader( object message ,string ReturnPath) {
		message.setOutgoingHeader( 'Return-Path', ReturnPath );
		message.setOutgoingHeader( 'User-Agent', "Ferite Cmail-module (www.ferite.org)" );
		message.setOutgoingHeader( 'X-Mailer', "CentionContactCenter/3.0 (www.cention.se)" );
		return message;
	}

	function createTextHTMLContent( string text, string html, string imgTrackingCode ) {
		object content = new Mail.MessageMultiPart();
		object text_content = new Mail.MessagePart();
		object html_content = new Mail.MessagePart();
		
		text_content.type = Mail.Mime.TYPETEXT;
		text_content.subtype = "plain";
		text_content.content = text;
		text_content.charset = "UTF-8";
	
		html_content.type = Mail.Mime.TYPETEXT;
		html_content.subtype = "html";
		html_content.content = "<html><body>$html $imgTrackingCode</body></html>";
		html_content.charset = "UTF-8";
		
		content.subtype = "alternative";
		content.addPart(text_content);
		if ( html ) {content.addPart(html_content);}
		
		return content;
	}

	function sendMail ( string subject,string toAddr,string fromAddr,string fromName,string textVersion, string htmlVersion,string imgTrackingCode) {
		monitor{
			object message = new Mail.Message();
			object connection = new Mail.Connection();
			
			
			object to = new Mail.Address(toAddr);
			object from = new Mail.Address(fromAddr);
			from.name = fromName;
			
			message.header = new Mail.MessageHeader();
			message.header.to.add( to );
			message.header.from.add( from );
			message.header.subject = subject;

			
			message = MailUtilities.setOutgoingHeader(message,fromAddr);
			
			message.content = MailUtilities.createTextHTMLContent(textVersion, htmlVersion,imgTrackingCode);
		
			return MailUtilities.sendMessage( connection, message );

			}
		handle{
			Console.println ( "error sending mail" + err.str );
			return false;
		}
	}
}



