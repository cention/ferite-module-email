uses "/cention/etc/webframework-config.feh";
uses "webframework/webframework";

uses 'console';
uses 'math';

global {	
	number failSafeTry = 3;
}


namespace MailUtilities{

	/**
		This function select a random server from the  list of servers available in webframework.config 

	**/
	 function selectMailServer(){
		monitor{	
			array servers;
			number rs = Math.randomNumber( 0,servers.size() ); //
			webframework.Config.byName('Outbound.Mailserver.*').each() using ( s  ) {
				servers[] = s.value;
			};		
			return servers[rs];
		}
		handle{			
			Console.println(  err.str );
		}
	}

	function failSafeTry(){
		monitor{
			return webframework.Config.byName('FailSafeTry')[0].value.toNumber();
		}
		handle{
			return failSafeTry;
		}
	}

	/**
		sendMessage which tries to send message. It tries failSafeTry number of attempts.

	**/

	function sendMessage( object connection, object message )
		return .sendMessage( connection, message, 0 );
		
	function sendMessage( object connection, object message, number try ) {
		string smtpHost = '';

		if ( try > MailUtilities.failSafeTry() ) 
			return false;
	
		smtpHost = MailUtilities.selectMailServer();	
		
		// Workaround for uw-imap bug
		if( connection.sendMessage( smtpHost, message ) ) {
			return true;
		}
		if( connection.sendMessage( smtpHost + '/smtp/novalidate-cert', message ) ) {
			return true;
		}
		
		try ++;
		return MailUtilities.sendMessage( connection, message, try );
	}

	function setOutgoingHeader( object message ,string ReturnPath) {
		message.setOutgoingHeader( 'Return-Path', ReturnPath );
		message.setOutgoingHeader( 'User-Agent', "Ferite Cmail-module (www.ferite.org)" );
		message.setOutgoingHeader( 'X-Mailer', "CentionContactCenter/3.0 (www.cention.se)" );
		return message;
	}

	function createTextHTMLContent( string text, string html, string imgTrackingCode ) {
		object content = new Mail.MessageMultiPart();
		object text_content = new Mail.MessagePart();
		object html_content = new Mail.MessagePart();
		
		text_content.type = Mail.Mime.TYPETEXT;
		text_content.subtype = "plain";
		text_content.content = text;
		text_content.charset = "UTF-8";
	
		html_content.type = Mail.Mime.TYPETEXT;
		html_content.subtype = "html";
		html_content.content = "<html><body>$html $imgTrackingCode</body></html>";
		html_content.charset = "UTF-8";
		
		content.subtype = "alternative";
		content.addPart(text_content);
		if ( html ) {content.addPart(html_content);}
		
		return content;
	}

	function sendMail ( string subject,string toAddr,string fromAddr,string fromName,string textVersion, string htmlVersion,string imgTrackingCode) {
		monitor{
			object message = new Mail.Message();
			object connection = new Mail.Connection();
			
			
			object to = new Mail.Address(toAddr);
			object from = new Mail.Address(fromAddr);
			from.name = fromName;
			
			message.header = new Mail.MessageHeader();
			message.header.to.add( to );
			message.header.from.add( from );
			message.header.subject = subject;

			
			message = MailUtilities.setOutgoingHeader(message,fromAddr);
			
			message.content = MailUtilities.createTextHTMLContent(textVersion, htmlVersion,imgTrackingCode);
		
			return MailUtilities.sendMessage( connection, message );

			}
		handle{
			Console.println ( "error sending mail" + err.str );
			return false;
		}
	}
}



